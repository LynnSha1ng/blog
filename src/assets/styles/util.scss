$xs2: 360px;
$xs: 540px;
$sm: 640px;
$md: 768px;
$lg: 900px;
$xl: 1024px;
$xl2: 1280px;

$scr-w-max: 520px * 2 + 300px + 12px * 4; // 1388px
$scr-h-without-top-nav: calc(100dvh - 60px - 12px * 2);

@mixin transition($property, $duration: 0.35s, $delay: null) {
  @if length($property) == 1 {
    transition: $property $duration $delay;
  } @else {
    transition-property: $property;
    transition-duration: $duration;
    transition-delay: $delay;
  }
}

@mixin screenBelow($breakpoint) {
  @media screen and (max-width: $breakpoint) {
    @content;
  }
}

@mixin screenAbove($breakpoint) {
  @media screen and (min-width: $breakpoint) {
    @content;
  }
}

@mixin screenBetween($min, $max) {
  @media screen and (min-width: $min) and (max-width: $max) {
    @content;
  }
}

@mixin onDarkMode {
  @media (prefers-color-scheme: dark) {
    @content;
  }
}

@mixin flex($justify: null, $align: null, $flow: null) {
  display: flex;
  flex-flow: $flow;
  justify-content: $justify;
  align-items: $align;
}

@mixin line-clamp($lines) {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines;
  overflow: hidden;
  text-overflow: ellipsis;
  overflow-wrap: break-word;
}

@mixin inline-separator(
  $sep,
  $margin-inline: 4px,
  $sep-color: var(--text-grey)
) {
  > *:not(i) {
    display: inline;
    margin-inline-end: $margin-inline;

    &:not(:last-child)::after {
      content: $sep;
      margin-inline-start: $margin-inline;
      color: $sep-color;
    }
  }
}

@mixin staggered-transition-time-manage(
  $type,
  $child-count,
  $child-duration,
  $child-delay
) {
  @if $type == 'root' {
    transition-duration: ($child-count - 1) * $child-delay + $child-duration;
  } @else if $type == 'child' {
    @for $i from 1 through $child-count {
      &:nth-child(#{$i}) {
        transition-duration: $child-duration;
        transition-delay: ($i - 1) * $child-delay;
      }
    }
  }
}
